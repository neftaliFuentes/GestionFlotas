@page "/Mantenedores/Bencinera"
@layout MainLayout

@using BlazorBootstrap
@using GestionFlotas.business
@using GestionFlotas.dataaccess
@using GestionFlotas.model
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core;
@using Radzen;

@inject IDbContextFactory<FlotasContext> ContextFactoryGestionFlotas
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
	<!-- Start::page-header -->
	<div class="row">
		<div class="col-xl-12">
			<div class="card custom-card">
				<div class="card-header justify-content-between">
					<div class="card-title"> Bencineras </div>
					<div class="d-flex flex-wrap gap-2">
						<div>
							<button class="btn btn-primary m-1" @onclick="() => EditarForm(new TbBencineraModel())">
								<i class="bi bi-plus-circle"></i>
								Nuevo
							</button>
						</div>
					</div>
				</div>
				<div class="card-body p-0">
					<div class="table-responsive">
						<RadzenDataGrid @ref="grid" LoadData=@LoadData style="display: flex; align-items: center; gap: 0.5rem; width:100%; min-width:700px !important"
										Data="@bencineraGrid"
										AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
										PageSize="20" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Center" ShowPagingSummary="true"
										TItem="TbBencineraModel" LogicalFilterOperator="LogicalFilterOperator.Or" ClearFilterText="Limpiar filtros" ApplyFilterText="Aplicar"
										AndOperatorText="Y" AllowGrouping="false" AllColumnsText="Todas las columnas" ContainsText="Contiene" Density="Radzen.Density.Default"
										DoesNotContainText="No contiene" EmptyText="No hay registros..." EndsWithText="Termina con" EnumFilterSelectText="Selecciona..."
										EnumNullFilterText="Sin valor" EqualsText="Igual" FilterText="Filtro" FirstPageAriaLabel="Ir a la primera página" FirstPageTitle="Primera página"
										GreaterThanOrEqualsText="Mayor o igual a" GreaterThanText="Mayor a" IsEmptyText="Está vacio" IsNotEmptyText="No está vacío" IsNotNullText="No es nulo"
										IsNullText="Es nulo" KeyProperty="TbBencineraId" LastPageAriaLabel="Ir a la última página" LastPageTitle="Última página" LessThanOrEqualsText="Menor o igual que"
										LessThanText="Menor que" NextPageAriaLabel="Ir a la siguiente página" NextPageTitle="Siguiente" NotEqualsText="No es igual a" OrOperatorText="o"
										PageAriaLabelFormat="Ir a la página [0]" PagerAlwaysVisible="false" PagerPosition="Radzen.PagerPosition.Bottom" PageSizeText="Registros por página"
										PageTitleFormat="Página [0]" PagingSummaryFormat="Página [0] de [1] ([2] Registros)" PrevPageAriaLabel="Ir a la página anterior"
										PrevPageTitle="Anterior" Responsive="false" StartsWithText="Comienza con" GridLines="Radzen.DataGridGridLines.Horizontal">
							<Columns>
								<RadzenDataGridColumn TItem="TbBencineraModel" Property=" TbBencineraId" Filterable="false" Resizable="false" Title="ID" Visible="false" />
								<RadzenDataGridColumn TItem="TbBencineraModel" Property="Nombre" Title="Nombre" Filterable=false Sortable=false />
								<RadzenDataGridColumn TItem="TbBencineraModel" Property="NombreRegion" Title="Región" Filterable=false Sortable=false />
								<RadzenDataGridColumn TItem="TbBencineraModel" Property="ActivoString" Title="Activo" Filterable=false Sortable=false TextAlign="TextAlign.Center" />
								<RadzenDataGridColumn TItem="TbBencineraModel" Property="TbBencineraId" Title="Editar" Filterable=false Sortable=false Width="75px">
									<Template Context="data">
										<RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="drive_file_rename_outline" class="m-1" Click=@(() => EditarForm(data)) />
									</Template>
								</RadzenDataGridColumn>
								<RadzenDataGridColumn TItem="TbBencineraModel" Property="TbBencineraId" Title="Eliminar" Filterable=false Sortable=false Width="75px">
									<Template Context="data">
										<RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete_sweep" class="m-1" Click=@(() => ShowDeleteDialog(data)) />
									</Template>
								</RadzenDataGridColumn>
							</Columns>
						</RadzenDataGrid>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<Modal @ref="modal" Title="Bencinera" UseStaticBackdrop="true" CloseOnEscape="false" IsVerticallyCentered="true" Size="ModalSize.Large">
	<BodyTemplate>
		<RadzenTemplateForm TItem="TbBencineraModel" Data="@BencineraSeleccionada" Submit="OnSubmit">
			<RadzenRow Style="padding: 5px">
				<RadzenColumn Size="12" SizeMD="2">
					<RadzenLabel Component="lblOrigen" Text="Empresa:"></RadzenLabel>
				</RadzenColumn>
				<RadzenColumn Size="12" SizeMD="3">
					<RadzenDropDown @bind-Value="@(BencineraSeleccionada.TbEmpresaBencineraId)" Data=@oListaRegiones
									TextProperty="@nameof(TbBencineraEmpresa.Nombre)"
									ValueProperty="@nameof(TbBencineraEmpresa.TbBencineraEmpresaId)"
									Disabled=@_controlesDisable
									AllowClear=false Placeholder="Seleccione un origen de movimiento inventario" Name="DDLOrigenMovimientoInventario" />
					<RadzenRequiredValidator Component="DDLOrigenMovimientoInventario" style="display:block;width:300px;"
											 Text="Debe seleccionar un origen de movimento inventario" />
				</RadzenColumn>
			</RadzenRow>
			<RadzenRow Style="padding: 5px">
				<RadzenColumn Size="12" SizeMD="2">
					<RadzenLabel Component="txtNombre" style="width: 100%; padding-left: 5px" Text="Nombre:"></RadzenLabel>
				</RadzenColumn>
				<RadzenColumn Size="12" SizeMD="10">
					<RadzenTextBox Name="txtNombre" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@BencineraSeleccionada.Nombre"></RadzenTextBox>
					<RadzenRequiredValidator Component="txtNombre" style="display:block;width:200px;" Text="Ingrese nombre" Popup="true"></RadzenRequiredValidator>
				</RadzenColumn>
			</RadzenRow>
			<RadzenRow Style="padding: 5px">
				<RadzenColumn Size="12">
					<RadzenLabel Text="Activo" Component="chkActivo" Style="margin-left: 8px; vertical-align: middle;" />
					<RadzenCheckBox @bind-Value="@BencineraSeleccionada.Activo" Name="chkActivo" />
				</RadzenColumn>
			</RadzenRow>
			<div style="text-align:right" class="col-md-12">
				<button class="btn btn-info m-1">
					<i class="bi bi-floppy"></i>
					Guardar
				</button>
			</div>
		</RadzenTemplateForm>
	</BodyTemplate>
</Modal>

<script src="assets2/libs/@@popperjs/core/umd/popper.min.js"></script>
<script src="assets2/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="assets2/js/defaultmenu.min.js"></script>
<script src="assets2/libs/node-waves/waves.min.js"></script>
<script src="assets2/js/sticky.js"></script>
<script src="assets2/libs/simplebar/simplebar.min.js"></script>
<script src="assets2/js/simplebar.js"></script>
<script src="assets2/libs/@@tarekraafat/autocomplete.js/autoComplete.min.js"></script>
<script src="assets2/libs/@@simonwep/pickr/pickr.es5.min.js"></script>
<script src="assets2/libs/flatpickr/flatpickr.min.js"></script>
<script src="assets2/libs/apexcharts/apexcharts.min.js"></script>

<script src="assets2/js/custom.js"></script>

@code {
	private Modal modal = default!;
	TbBencineraModel BencineraSeleccionada = new TbBencineraModel();
	IEnumerable<TbBencineraModel?> bencineraGrid;
	RadzenDataGrid<TbBencineraModel?> grid = null!;
	List<TbRegionModel> oListaRegiones = null;
	bool isWaiting = true;
	int count;
	public bool _controlesDisable { get; set; }

	// List<TbPerfilModel?> perfiles;
	// List<TbPersonaModel?> personas;


	//TbUsuarioBL? ubl;
	//TbUsuarioModel? userAccountModel;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// // var _sessionState = await authStateProvider.GetAuthenticationStateAsync();
		// // if (_sessionState.User.Identity.IsAuthenticated)
		// // {
		// // 	var _userData = ((ClaimsIdentity)_sessionState.User.Identity).FindFirst("UserData").Value;

		// // 	userAccountModel = JsonConvert.DeserializeObject<TbUsuarioModel>(_userData);
		// // }
		using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
		{
			// 	ubl = new TbUsuarioBL(_db);

			// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 233))
			// 		Nav.NavigateTo("/sinacceso", true);
			oListaRegiones = await new TbRegionBL(_db).ListarByDDL();
		}
	}

	async Task LoadData(LoadDataArgs args)
	{
		using (var _dbm = ContextFactoryGestionFlotas.CreateDbContext())
		{
			var query = new TbBencineraBL(_dbm).ListarAsQuerable();

			if (!string.IsNullOrEmpty(args.Filter))
			{
				// Filter via the Where method
				query = query.Where(args.Filter);
			}

			if (!string.IsNullOrEmpty(value: args.OrderBy))
			{
				// Sort via the OrderBy method
				query = query.OrderBy(args.OrderBy);
			}

			// Important!!! Make sure the Count property of RadzenDataGrid is set.
			count = query.Count();

			// Perform paging via Skip and Take.
			bencineraGrid = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
		}
		isWaiting = false;
	}

	async Task EditarForm(TbBencineraModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				if (registro.TbBencineraId > 0)
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 16))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");

					BencineraSeleccionada = await new TbBencineraBL(_db).Obtener(registro.TbBencineraId);
					await modal.ShowAsync();
				}
				else
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 15))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");
					BencineraSeleccionada = registro;
					await modal.ShowAsync();
				}
			}
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async Task ShowDeleteDialog(TbBencineraModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				// if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 241)) // Privilegio para eliminar
				// 	throw new Exception("Usted no tiene acceso para realizar esta operación");
				// else
				// {

				var result = await DialogService.OpenAsync("Confirmación eliminación de registro", ds =>
	@<RadzenStack Gap="1.5rem">
		<div class="row mb-3">
			<h4>Va a eliminar este registro, ¿Desea continuar?</h4>
		</div>
		<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
			<RadzenStack Orientation="Radzen.Orientation.Horizontal">
				<RadzenButton Text="Si" Click="() => ds.Close(true)" ButtonStyle="ButtonStyle.Danger" class="w-50" />
				<RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="w-50" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>);
				if (result != null)
				{
					if (result && registro != null)
					{
						try
						{
							using (var _dbModules = ContextFactoryGestionFlotas.CreateDbContext())
							{
								await new TbBencineraBL(_dbModules).Eliminar(registro.TbBencineraId);
							}
							await grid.Reload();
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro eliminado exitosamente", Duration = 2000 });
						}
						catch (Exception ex)
						{
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
						}

					}
				}
				// }
			}

		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async void OnSubmit()
	{
		try
		{
			isWaiting = true;

			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				await new TbBencineraBL(_db).Guardar(BencineraSeleccionada);
				await grid.Reload();
			}

			BencineraSeleccionada = null;
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro guardado exitosamente", Duration = 2000 });
			await OnHideModalClick();
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
		finally
		{
			isWaiting = false;
		}
	}

	void ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}
}



