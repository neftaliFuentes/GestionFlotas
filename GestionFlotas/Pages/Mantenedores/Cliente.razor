@page "/Mantenedores/Cliente"
@layout MainLayout

@using BlazorBootstrap
@using GestionFlotas.business
@using GestionFlotas.dataaccess
@using GestionFlotas.model
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core;
@using Radzen;

@inject IDbContextFactory<FlotasContext> ContextFactoryGestionFlotas
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
	<!-- Start::page-header -->
	<div class="row">
		<div class="col-xl-12">
			<div class="card custom-card">
				<div class="card-header justify-content-between">
					<div class="card-title"> Clientes </div>
					<div class="d-flex flex-wrap gap-2">
						<div>
							<button class="btn btn-primary m-1" @onclick="() => EditarForm(new TbClienteModel())">
								<i class="bi bi-plus-circle"></i>
								Nuevo
							</button>
						</div>
					</div>
				</div>
				<div class="card-body p-0">
					<div class="table-responsive">
						<RadzenDataGrid @ref="grid" LoadData=@LoadData style="display: flex; align-items: center; gap: 0.5rem; width:100%; min-width:700px !important"
										Data="@clienteGrid"
										AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
										PageSize="20" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Center" ShowPagingSummary="true"
										TItem="TbClienteModel" LogicalFilterOperator="LogicalFilterOperator.Or" ClearFilterText="Limpiar filtros" ApplyFilterText="Aplicar"
										AndOperatorText="Y" AllowGrouping="false" AllColumnsText="Todas las columnas" ContainsText="Contiene" Density="Radzen.Density.Default"
										DoesNotContainText="No contiene" EmptyText="No hay registros..." EndsWithText="Termina con" EnumFilterSelectText="Selecciona..."
										EnumNullFilterText="Sin valor" EqualsText="Igual" FilterText="Filtro" FirstPageAriaLabel="Ir a la primera página" FirstPageTitle="Primera página"
										GreaterThanOrEqualsText="Mayor o igual a" GreaterThanText="Mayor a" IsEmptyText="Está vacio" IsNotEmptyText="No está vacío" IsNotNullText="No es nulo"
										IsNullText="Es nulo" KeyProperty="TbClienteId" LastPageAriaLabel="Ir a la última página" LastPageTitle="Última página" LessThanOrEqualsText="Menor o igual que"
										LessThanText="Menor que" NextPageAriaLabel="Ir a la siguiente página" NextPageTitle="Siguiente" NotEqualsText="No es igual a" OrOperatorText="o"
										PageAriaLabelFormat="Ir a la página [0]" PagerAlwaysVisible="false" PagerPosition="Radzen.PagerPosition.Bottom" PageSizeText="Registros por página"
										PageTitleFormat="Página [0]" PagingSummaryFormat="Página [0] de [1] ([2] Registros)" PrevPageAriaLabel="Ir a la página anterior"
										PrevPageTitle="Anterior" Responsive="false" StartsWithText="Comienza con" GridLines="Radzen.DataGridGridLines.Horizontal">
							<Columns>
								<RadzenDataGridColumn TItem="TbClienteModel" Property=" TbClienteId" Filterable="false" Resizable="false" Title="ID" Visible="false" />
								<RadzenDataGridColumn TItem="TbClienteModel" Property="Nombre" Title="Nombre" Filterable=false Sortable=false />
								<RadzenDataGridColumn TItem="TbClienteModel" Property="RazonSocial" Title="Razon social" Filterable=false Sortable=false />
								<RadzenDataGridColumn TItem="TbClienteModel" Property="RutFormatado" Title="R.U.T" Filterable=false Sortable=false />
								<RadzenDataGridColumn TItem="TbClienteModel" Property="ActivoString" Title="Activo" Filterable=false Sortable=false TextAlign="TextAlign.Center" />
								<RadzenDataGridColumn TItem="TbClienteModel" Property="TbClienteId" Title="Editar" Filterable=false Sortable=false Width="75px">
									<Template Context="data">
										<RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="drive_file_rename_outline" class="m-1" Click=@(() => EditarForm(data)) />
									</Template>
								</RadzenDataGridColumn>
								<RadzenDataGridColumn TItem="TbClienteModel" Property="TbClienteId" Title="Eliminar" Filterable=false Sortable=false Width="75px">
									<Template Context="data">
										<RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete_sweep" class="m-1" Click=@(() => ShowDeleteDialog(data)) />
									</Template>
								</RadzenDataGridColumn>
							</Columns>
						</RadzenDataGrid>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<Modal @ref="modal" Title="Cliente" UseStaticBackdrop="true" CloseOnEscape="false" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge">
	<BodyTemplate>
		<RadzenTemplateForm TItem="TbClienteModel" Data="@ClienteSeleccionado" Submit="OnSubmit">
			<RadzenTabs RenderMode="TabRenderMode.Client">
				<Tabs>
					<RadzenTabsItem Text="Datos Marca">
						<RadzenRow Style="padding: 5px">
							<RadzenColumn Size="12" SizeMD="2">
								<RadzenLabel Component="txtNombre" style="width: 100%; padding-left: 5px" Text="Nombre:"></RadzenLabel>
							</RadzenColumn>
							<RadzenColumn Size="12" SizeMD="10">
								<RadzenTextBox Name="txtNombre" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@ClienteSeleccionado.Nombre"></RadzenTextBox>
								<RadzenRequiredValidator Component="txtNombre" style="display:block;width:200px;" Text="Ingrese nombre" Popup="true"></RadzenRequiredValidator>
							</RadzenColumn>
							<RadzenColumn Size="12" SizeMD="2">
								<RadzenLabel Component="LblRut" style="width: 100%; padding-left: 5px" Text="Rut:"></RadzenLabel>
							</RadzenColumn>
							<RadzenColumn Size="12" SizeMD="10">
								<RadzenTextBox Name="txtRut" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@ClienteSeleccionado.RutFormatado"></RadzenTextBox>
								<RadzenRequiredValidator Component="txtRut" style="display:block;width:200px;" Text="Ingrese rut" Popup="true"></RadzenRequiredValidator>
							</RadzenColumn>
							<RadzenColumn Size="12" SizeMD="2">
								<RadzenLabel Component="lblRazonSocial" style="width: 100%; padding-left: 5px" Text="Razon social:"></RadzenLabel>
							</RadzenColumn>
							<RadzenColumn Size="12" SizeMD="10">
								<RadzenTextBox Name="txtRazonSocial" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@ClienteSeleccionado.RazonSocial"></RadzenTextBox>
								<RadzenRequiredValidator Component="txtRazonSocial" style="display:block;width:200px;" Text="Ingrese razon social" Popup="true"></RadzenRequiredValidator>
							</RadzenColumn>
						</RadzenRow>
						<RadzenRow Style="padding: 5px">
							<RadzenColumn Size="12">
								<RadzenLabel Text="Activo" Component="chkActivo" Style="margin-left: 8px; vertical-align: middle;" />
								<RadzenCheckBox @bind-Value="@ClienteSeleccionado.Activo" Name="chkActivo" />
							</RadzenColumn>
						</RadzenRow>
						<div style="text-align:right" class="col-md-12">
							<button class="btn btn-primary m-1">
								<i class="bi bi-floppy"></i>
								Guardar
							</button>
						</div>
					</RadzenTabsItem>
					@if (_muestraSucursales)
					{
						<RadzenTabsItem Text="Sucursales">
							<RadzenRow Style="padding: 5px">
								<RadzenColumn Size="12" SizeMD="1">
									<RadzenLabel Component="txtNombresucursal" style="width: 100%; padding-left: 5px" Text="Nombre:"></RadzenLabel>
								</RadzenColumn>
								<RadzenColumn Size="12" SizeMD="9">
									<RadzenTextBox Name="txtNombreSucursal" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@SucursalSeleccionada.Nombre"></RadzenTextBox>
									<RadzenRequiredValidator Component="txtNombreSucursal" style="display:block;width:200px;" Text="Ingrese nombre" Popup="true"></RadzenRequiredValidator>
								</RadzenColumn>
							</RadzenRow>
							<RadzenRow Style="padding: 5px">
								<RadzenColumn Size="12" SizeMD="1">
									<RadzenLabel Component="lblDireccion" style="width: 100%; padding-left: 5px" Text="Dirección:"></RadzenLabel>
								</RadzenColumn>
								<RadzenColumn Size="12" SizeMD="9">
									<RadzenTextBox Name="lblDireccion" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@SucursalSeleccionada.Direccion"></RadzenTextBox>
									<RadzenRequiredValidator Component="txtDireccion" style="display:block;width:200px;" Text="Ingrese nombre" Popup="true"></RadzenRequiredValidator>
								</RadzenColumn>
							</RadzenRow>
							<RadzenRow Style="padding: 5px">
								<RadzenColumn Size="12" SizeMD="1">
									<RadzenLabel Component="lblOrigen" Text="Comuna:"></RadzenLabel>
								</RadzenColumn>
								<RadzenColumn Size="12" SizeMD="7">
									<RadzenFormField Style="width: 100%;" Visible="true">
										<BlazorBootstrap.AutoComplete @bind-Value="oComunaSeleccionada.Nombre"
																	  TItem="TbComunaModel"
																	  DataProvider="ComunaDataProvider"
																	  PropertyName="Nombre"
																	  Placeholder="Ingrese nombre de la comuna..."
																	  LoadingText="Espere un momento cargando información..."
																	  EmptyText="No se encontraron registros...."
																	  OnChanged="(TbComunaModel comuna) => OnAutoCompleteChangedComuna(comuna)" />
									</RadzenFormField>
								</RadzenColumn>
								<RadzenColumn Size="12" SizeMD="2" >
									<RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Text=@_tituloBoton
												  Shade="Shade.Lighter" Icon=@iconoBoton class="m-1" Click=@(() => OnClickAgregaSucursales()) />

									@* <div style="text-align:right" class="col-md-12">
								<button class="btn btn-primary m-1" @onclick="() => OnClickAgregaModelos()">
								<i class="bi bi-floppy"></i>
								@_tituloBoton
								</button>
								</div> *@
								</RadzenColumn>
							</RadzenRow>
							<RadzenRow Style="padding: 5px">
								<RadzenColumn Size="6">
									<RadzenLabel Text="Activo" Component="chkActivo" Style="margin-left: 8px; vertical-align: middle;" />
									<RadzenCheckBox @bind-Value="@SucursalSeleccionada.Activo" Name="chkActivo" />
								</RadzenColumn>
							</RadzenRow>
							<br />
							<RadzenDataGrid @ref="sucursalGrid" style="display: flex; align-items: center; gap: 0.5rem; width:100%; min-width:700px !important"
											Data="@sucursalClienteGrid"
											AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
											PageSize="7" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Center" ShowPagingSummary="true"
											TItem="TbClienteSucursalModel" LogicalFilterOperator="LogicalFilterOperator.Or" ClearFilterText="Limpiar filtros" ApplyFilterText="Aplicar"
											AndOperatorText="Y" AllowGrouping="false" AllColumnsText="Todas las columnas" ContainsText="Contiene" Density="Radzen.Density.Default"
											DoesNotContainText="No contiene" EmptyText="No hay registros..." EndsWithText="Termina con" EnumFilterSelectText="Selecciona..."
											EnumNullFilterText="Sin valor" EqualsText="Igual" FilterText="Filtro" FirstPageAriaLabel="Ir a la primera página" FirstPageTitle="Primera página"
											GreaterThanOrEqualsText="Mayor o igual a" GreaterThanText="Mayor a" IsEmptyText="Está vacio" IsNotEmptyText="No está vacío" IsNotNullText="No es nulo"
											IsNullText="Es nulo" KeyProperty="TbVehiculoMarcaId" LastPageAriaLabel="Ir a la última página" LastPageTitle="Última página" LessThanOrEqualsText="Menor o igual que"
											LessThanText="Menor que" NextPageAriaLabel="Ir a la siguiente página" NextPageTitle="Siguiente" NotEqualsText="No es igual a" OrOperatorText="o"
											PageAriaLabelFormat="Ir a la página [0]" PagerAlwaysVisible="false" PagerPosition="Radzen.PagerPosition.Bottom" PageSizeText="Registros por página"
											PageTitleFormat="Página [0]" PagingSummaryFormat="Página [0] de [1] ([2] Registros)" PrevPageAriaLabel="Ir a la página anterior"
											PrevPageTitle="Anterior" Responsive="false" StartsWithText="Comienza con" GridLines="Radzen.DataGridGridLines.Horizontal">
								<Columns>
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property=" TbVehiculoMarcaId" Filterable="false" Resizable="false" Title="ID" Visible="false" />
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="Nombre" Title="Nombre" Filterable=false Sortable=false />
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="Direccion" Title="Dirección" Filterable=false Sortable=false />
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="NombreComuna" Title="Comuna" Filterable=false Sortable=false />
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="ActivoString" Title="Activo" Filterable=false Sortable=false TextAlign="TextAlign.Center" />
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="TbVehiculoMarcaId" Title="Editar" Filterable=false Sortable=false Width="75px">
										<Template Context="data">
											<RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="drive_file_rename_outline" class="m-1" Click=@(() => EditarSucursal(data)) />
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="TbClienteSucursalModel" Property="TbVehiculoMarcaId" Title="Eliminar" Filterable=false Sortable=false Width="75px">
										<Template Context="data">
											<RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete_sweep" class="m-1" Click=@(() => ShowDeleteSucursalesDialog(data)) />
										</Template>
									</RadzenDataGridColumn>
								</Columns>
							</RadzenDataGrid>
						</RadzenTabsItem>
					}
				</Tabs>
			</RadzenTabs>
		</RadzenTemplateForm>
	</BodyTemplate>
</Modal>

<script src="assets2/libs/@@popperjs/core/umd/popper.min.js"></script>
<script src="assets2/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="assets2/js/defaultmenu.min.js"></script>
<script src="assets2/libs/node-waves/waves.min.js"></script>
<script src="assets2/js/sticky.js"></script>
<script src="assets2/libs/simplebar/simplebar.min.js"></script>
<script src="assets2/js/simplebar.js"></script>
<script src="assets2/libs/@@tarekraafat/autocomplete.js/autoComplete.min.js"></script>
<script src="assets2/libs/@@simonwep/pickr/pickr.es5.min.js"></script>
<script src="assets2/libs/flatpickr/flatpickr.min.js"></script>
<script src="assets2/libs/apexcharts/apexcharts.min.js"></script>

<script src="assets2/js/custom.js"></script>

@code {
	private Modal modal = default!;
	TbClienteModel ClienteSeleccionado = new TbClienteModel();
	IEnumerable<TbClienteModel?> clienteGrid;
	RadzenDataGrid<TbClienteModel?> grid = null!;
	TbClienteSucursalModel SucursalSeleccionada = new TbClienteSucursalModel();
	IEnumerable<TbClienteSucursalModel?> sucursalClienteGrid;
	RadzenDataGrid<TbClienteSucursalModel?> sucursalGrid = null!;
	IEnumerable<TbComunaModel> Comunas;
	TbComunaModel? oComunaSeleccionada;
	bool isWaiting = true;
	int count;
	bool _muestraSucursales = false;
	string _tituloBoton = "Agregar";
	string iconoBoton = "add_circle_outline";
	int _comunaSelecionadaId;

	// List<TbPerfilModel?> perfiles;
	// List<TbPersonaModel?> personas;


	//TbUsuarioBL? ubl;
	//TbUsuarioModel? userAccountModel;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// // var _sessionState = await authStateProvider.GetAuthenticationStateAsync();
		// // if (_sessionState.User.Identity.IsAuthenticated)
		// // {
		// // 	var _userData = ((ClaimsIdentity)_sessionState.User.Identity).FindFirst("UserData").Value;

		// // 	userAccountModel = JsonConvert.DeserializeObject<TbUsuarioModel>(_userData);
		// // }
		using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
		{
		// 	ubl = new TbUsuarioBL(_db);

		// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 233))
		// 		Nav.NavigateTo("/sinacceso", true);
			Comunas = await new TbComunaBL(_db).ListarByDDL();
			oComunaSeleccionada = new TbComunaModel();
		}
	}

	async Task LoadData(LoadDataArgs args)
	{
		using (var _dbm = ContextFactoryGestionFlotas.CreateDbContext())
		{
			var query = new TbClienteBL(_dbm).ListarAsQuerable();

			if (!string.IsNullOrEmpty(args.Filter))
			{
				// Filter via the Where method
				query = query.Where(args.Filter);
			}

			if (!string.IsNullOrEmpty(value: args.OrderBy))
			{
				// Sort via the OrderBy method
				query = query.OrderBy(args.OrderBy);
			}

			// Important!!! Make sure the Count property of RadzenDataGrid is set.
			count = query.Count();

			// Perform paging via Skip and Take.
			clienteGrid = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
		}
		isWaiting = false;
	}

	async Task EditarForm(TbClienteModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				if (registro.TbClienteId > 0)
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 16))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");

					ClienteSeleccionado = await new TbClienteBL(_db).ObtenerConSucursal(registro.TbClienteId);
					sucursalClienteGrid = ClienteSeleccionado.MisSucursales;
					_muestraSucursales = true;
					await modal.ShowAsync();
				}
				else
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 15))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");
					ClienteSeleccionado = registro;
					_muestraSucursales = false;
					await modal.ShowAsync();
				}
			}
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async Task ShowDeleteDialog(TbClienteModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				// if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 241)) // Privilegio para eliminar
				// 	throw new Exception("Usted no tiene acceso para realizar esta operación");
				// else
				// {

				var result = await DialogService.OpenAsync("Confirmación eliminación de registro", ds =>
	@<RadzenStack Gap="1.5rem">
		<div class="row mb-3">
			<h4>Va a eliminar este registro, ¿Desea continuar?</h4>
		</div>
		<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
			<RadzenStack Orientation="Radzen.Orientation.Horizontal">
				<RadzenButton Text="Si" Click="() => ds.Close(true)" ButtonStyle="ButtonStyle.Danger" class="w-50" />
				<RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="w-50" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>
		);
				if (result != null)
				{
					if (result && registro != null)
					{
						try
						{
							using (var _dbModules = ContextFactoryGestionFlotas.CreateDbContext())
							{
								await new TbClienteBL(_dbModules).Eliminar(registro.TbClienteId);
							}
							await grid.Reload();
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro eliminado exitosamente", Duration = 2000 });
						}
						catch (Exception ex)
						{
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
						}

					}
				}
				// }
			}

		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async void OnSubmit()
	{
		try
		{
			isWaiting = true;

			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				string[] rut = ClienteSeleccionado.RutFormatado.Split('-');
				ClienteSeleccionado.Rut = int.Parse(rut[0]);
				ClienteSeleccionado.Digito = rut[1].Substring(0, 1);
				await new TbClienteBL(_db).Guardar(ClienteSeleccionado);
				await grid.Reload();
			}

			ClienteSeleccionado = null;
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro guardado exitosamente", Duration = 2000 });
			await OnHideModalClick();
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
		finally
		{
			isWaiting = false;
		}
	}

	private async Task<AutoCompleteDataProviderResult<TbComunaModel>> ComunaDataProvider(AutoCompleteDataProviderRequest<TbComunaModel> request)
	{
		if (Comunas is null)
			using (var _dbMain = ContextFactoryGestionFlotas.CreateDbContext())
			{
				Comunas = await new TbComunaBL(_dbMain).ListarByDDL();
			}

		return await Task.FromResult(request.ApplyTo(Comunas.OrderBy(x => x.Nombre)));
	}

	private async void OnAutoCompleteChangedComuna(TbComunaModel oComuna)
	{
		if (oComuna == null)
		{
			using (var _dbMod = ContextFactoryGestionFlotas.CreateDbContext())
			{
				Comunas = await new TbComunaBL(_dbMod).ListarByDDL();
			}

			oComunaSeleccionada = new TbComunaModel();
			_comunaSelecionadaId = 0;
			return;
		}

		if (oComuna.TbComunaId > 0)
		{
			oComunaSeleccionada = oComuna;
			_comunaSelecionadaId = oComuna.TbComunaId;

			await InvokeAsync(StateHasChanged);
		}

		// if (oComuna == null)
		// {
		// 	return;
		// }

		// if (oComuna.TbComunaId > 0)
		// {
		// 	oComunaSeleccionada = oComuna;
		// 	InvokeAsync(StateHasChanged);
		// }
	}

	async Task ShowDeleteSucursalesDialog(TbClienteSucursalModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				// if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 241)) // Privilegio para eliminar
				// 	throw new Exception("Usted no tiene acceso para realizar esta operación");
				// else
				// {

				var result = await DialogService.OpenAsync("Confirmación eliminación de registro", ds =>
	@<RadzenStack Gap="1.5rem">
		<div class="row mb-3">
			<h4>Va a eliminar este registro, ¿Desea continuar?</h4>
		</div>
		<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
			<RadzenStack Orientation="Radzen.Orientation.Horizontal">
				<RadzenButton Text="Si" Click="() => ds.Close(true)" ButtonStyle="ButtonStyle.Danger" class="w-50" />
				<RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="w-50" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>
	);
				if (result != null)
				{
					if (result && registro != null)
					{
						try
						{
							using (var _dbModules = ContextFactoryGestionFlotas.CreateDbContext())
							{
								await new TbClienteSucursalBL(_dbModules).Eliminar(registro.TbClienteSucursalId);
								ClienteSeleccionado.MisSucursales.Remove(registro);
								sucursalClienteGrid = ClienteSeleccionado.MisSucursales;
							}
							await sucursalGrid.Reload();
							//await InvokeAsync(StateHasChanged);
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro eliminado exitosamente", Duration = 2000 });
						}
						catch (Exception ex)
						{
							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
						}

					}
				}
				//}
			}

		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async void OnClickAgregaSucursales()
	{
		try
		{
			if (ClienteSeleccionado.TbClienteId == 0)
				throw new Exception("Debe seleccionar una marcao antes de agregar");
			if (ClienteSeleccionado.Nombre == "")
				throw new Exception("Debe ingresar nombre del sucursal");

			using (var _dbMod = ContextFactoryGestionFlotas.CreateDbContext())
			{
				if (SucursalSeleccionada.TbClienteSucursalId == 0)
				{
					TbClienteSucursalModel oNuevoSucursal = new TbClienteSucursalModel();
					oNuevoSucursal.TbClienteId = ClienteSeleccionado.TbClienteId;
					oNuevoSucursal.Nombre = SucursalSeleccionada.Nombre;
					oNuevoSucursal.Direccion = SucursalSeleccionada.Direccion;
					oNuevoSucursal.TbComunaId = oComunaSeleccionada.TbComunaId;
					oNuevoSucursal.Activo = SucursalSeleccionada.Activo;
					oNuevoSucursal.NombreComuna = oComunaSeleccionada.Nombre;

					List<ErrorValidacionModel> validacionSucursal = ValidadorModelBL.valida(oNuevoSucursal);
					if (validacionSucursal.Count > 0) throw new Exception(string.Join("<br/>", validacionSucursal.Select(x => x.Mensaje)));

					ClienteSeleccionado.MisSucursales.Add(oNuevoSucursal);

					await new TbClienteSucursalBL(_dbMod).Guardar(oNuevoSucursal);
				}
				else
				{
					await new TbClienteSucursalBL(_dbMod).Guardar(SucursalSeleccionada);
					TbClienteSucursalModel sucursalACambia = ClienteSeleccionado.MisSucursales.Where(x => x.TbClienteSucursalId == SucursalSeleccionada.TbClienteSucursalId).FirstOrDefault();
					sucursalACambia.Nombre = SucursalSeleccionada.Nombre;
					sucursalACambia.Nombre = SucursalSeleccionada.Nombre;
					sucursalACambia.Direccion = SucursalSeleccionada.Direccion;
					sucursalACambia.TbComunaId = oComunaSeleccionada.TbComunaId;
					sucursalACambia.Activo = SucursalSeleccionada.Activo;
					sucursalACambia.ActivoString = sucursalACambia.Activo ? "Si" : "NO";
					sucursalACambia.NombreComuna = oComunaSeleccionada.Nombre;
				}
			}

			sucursalClienteGrid = ClienteSeleccionado.MisSucursales;
			await sucursalGrid.Reload();

			SucursalSeleccionada = new TbClienteSucursalModel();
			oComunaSeleccionada = new TbComunaModel();
			_tituloBoton = "Agregar";
			iconoBoton = "add_circle_outline";
			await InvokeAsync(StateHasChanged);
			//btnGuardar.Visible = true;
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
		finally
		{
			isWaiting = false;
			//btnAgregaProductos.Disabled = false;
		}
	}

	async Task EditarSucursal(TbClienteSucursalModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				if (registro.TbClienteSucursalId > 0)
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 16))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");

					SucursalSeleccionada = await new TbClienteSucursalBL(_db).Obtener(registro.TbClienteSucursalId);
					_tituloBoton = "Actualizar";
					iconoBoton = "save";
					await modal.ShowAsync();
				}
				else
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 15))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");
					SucursalSeleccionada = registro;
					_tituloBoton = "Agregar";
					iconoBoton = "add_circle_outline";
					await modal.ShowAsync();
				}
			}
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}


	void ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}
}




