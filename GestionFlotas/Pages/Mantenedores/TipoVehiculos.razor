@page "/Mantenedores/TipoVehiculos"
@layout MainLayout

@using BlazorBootstrap
@using GestionFlotas.business
@using GestionFlotas.dataaccess
@using GestionFlotas.model
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core;
@using Radzen;

@inject IDbContextFactory<FlotasContext> ContextFactoryGestionFlotas
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<div class="h-[calc(100vh-60px)]  relative overflow-y-auto overflow-x-hidden p-4 space-y-4 detached-content">

	<nav class="w-full">
		<ul class="space-y-2 detached-breadcrumb">
			<li class="text-xs dark:text-white/80">Mantenedor</li>
			<li class="text-xl font-semibold text-slate-800 dark:text-slate-100">Tipos de vehículos</li>
		</ul>
	</nav>
	<!-- Start All Card -->

	<div class="card">
		<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
		<RadzenButton ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Button" Icon="add_circle_outline" Text="Nuevo" Variant="Radzen.Variant.Flat" Style="margin: 10px" Click="@(() => EditarForm(new TbVehiculoTipoModel()))" />
		</RadzenStack>

		<div x-data="modals">
			<button type="button" class="btn flex items-center gap-1.5 bg-purple border-purple text-white hover:bg-purple/[0.85] hover:border-purple/[0.85]"
					@click="toggle">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-4 h-4 mx-auto">
					<path d="M22 20H2V18H3V11.0314C3 6.04348 7.02944 2 12 2C16.9706 2 21 6.04348 21 11.0314V18H22V20ZM5 18H19V11.0314C19 7.14806 15.866 4 12 4C8.13401 4 5 7.14806 5 11.0314V18ZM9.5 21H14.5C14.5 22.3807 13.3807 23.5 12 23.5C10.6193 23.5 9.5 22.3807 9.5 21Z" fill="currentColor"></path>
				</svg>
				Nuevo
			</button>
			<br />
			<div class="fixed inset-0 bg-black/80 z-[99999] hidden overflow-y-auto dark:bg-dark/90" :class="open &amp;&amp; '!display'">
				<div class="flex items-start justify-center min-h-screen px-4" @click.self="open = false">
					<div x-show="open" x-transition="" x-transition.duration.300="" class="relative w-full max-w-5xl p-0 my-8 overflow-hidden bg-white border rounded-lg shadow-3xl border-black/10 dark:bg-darklight dark:border-darkborder" style="display: none;">
						<div class="flex items-center justify-between px-5 py-3 bg-white border-b border-black/10 dark:bg-darklight dark:border-darkborder">
							<h5 class="text-lg font-semibold dark:text-white">Extra Large Modal</h5>
							<button type="button" class="text-muted hover:text-black dark:hover:text-white" @click="toggle">
								<svg class="w-5 h-5" width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M24.2929 6.29289L6.29289 24.2929C6.10536 24.4804 6 24.7348 6 25C6 25.2652 6.10536 25.5196 6.29289 25.7071C6.48043 25.8946 6.73478 26 7 26C7.26522 26 7.51957 25.8946 7.70711 25.7071L25.7071 7.70711C25.8946 7.51957 26 7.26522 26 7C26 6.73478 25.8946 6.48043 25.7071 6.29289C25.5196 6.10536 25.2652 6 25 6C24.7348 6 24.4804 6.10536 24.2929 6.29289Z" fill="currentcolor"></path>
									<path d="M7.70711 6.29289C7.51957 6.10536 7.26522 6 7 6C6.73478 6 6.48043 6.10536 6.29289 6.29289C6.10536 6.48043 6 6.73478 6 7C6 7.26522 6.10536 7.51957 6.29289 7.70711L24.2929 25.7071C24.4804 25.8946 24.7348 26 25 26C25.2652 26 25.5196 25.8946 25.7071 25.7071C25.8946 25.5196 26 25.2652 26 25C26 24.7348 25.8946 24.4804 25.7071 24.2929L7.70711 6.29289Z" fill="currentcolor"></path>
								</svg>
							</button>
						</div>
						<div class="p-5 space-y-4">
							<div class="text-black dark:text-muted">
								ssdfsdffsdfsdfsdf
							</div>
							<div class="flex items-center justify-end gap-4">
								<button type="button" class="transition-all duration-300 border rounded-md btn text-danger border-danger hover:bg-danger hover:text-white" @click="toggle">Cerrar</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div style="overflow:auto !important">
			<RadzenDataGrid @ref="grid" LoadData=@LoadData style="display: flex; align-items: center; gap: 0.5rem; width:100%; min-width:700px !important"
							Data="@tipoVehiculoGrid"
							AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true"
							PageSize="20" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Center" ShowPagingSummary="true"
							TItem="TbVehiculoTipoModel" LogicalFilterOperator="LogicalFilterOperator.Or" ClearFilterText="Limpiar filtros" ApplyFilterText="Aplicar"
							AndOperatorText="Y" AllowGrouping="false" AllColumnsText="Todas las columnas" ContainsText="Contiene" Density="Radzen.Density.Default"
							DoesNotContainText="No contiene" EmptyText="No hay registros..." EndsWithText="Termina con" EnumFilterSelectText="Selecciona..."
							EnumNullFilterText="Sin valor" EqualsText="Igual" FilterText="Filtro" FirstPageAriaLabel="Ir a la primera página" FirstPageTitle="Primera página"
							GreaterThanOrEqualsText="Mayor o igual a" GreaterThanText="Mayor a" IsEmptyText="Está vacio" IsNotEmptyText="No está vacío" IsNotNullText="No es nulo"
							IsNullText="Es nulo" KeyProperty="TbVehiculoTipoId" LastPageAriaLabel="Ir a la última página" LastPageTitle="Última página" LessThanOrEqualsText="Menor o igual que"
							LessThanText="Menor que" NextPageAriaLabel="Ir a la siguiente página" NextPageTitle="Siguiente" NotEqualsText="No es igual a" OrOperatorText="o"
							PageAriaLabelFormat="Ir a la página [0]" PagerAlwaysVisible="false" PagerPosition="Radzen.PagerPosition.Bottom" PageSizeText="Registros por página"
							PageTitleFormat="Página [0]" PagingSummaryFormat="Página [0] de [1] ([2] Registros)" PrevPageAriaLabel="Ir a la página anterior"
							PrevPageTitle="Anterior" Responsive="false" StartsWithText="Comienza con" GridLines="Radzen.DataGridGridLines.Horizontal">
				<Columns>
					<RadzenDataGridColumn TItem="TbVehiculoTipoModel" Property=" TbVehiculoTipoId" Filterable="false" Resizable="false" Title="ID" Visible="false" />
					<RadzenDataGridColumn TItem="TbVehiculoTipoModel" Property="Nombre" Title="Nombre" Filterable=false Sortable=false />
					<RadzenDataGridColumn TItem="TbVehiculoTipoModel" Property="ActivoString" Title="Activo" Filterable=false Sortable=false TextAlign="TextAlign.Center" />
					<RadzenDataGridColumn TItem="TbVehiculoTipoModel" Property="TbVehiculoTipoId" Title="Editar" Filterable=false Sortable=false Width="75px">
						<Template Context="data">
							<RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="drive_file_rename_outline" class="m-1" Click=@(() => EditarForm(data)) />
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="TbVehiculoTipoModel" Property="TbVehiculoTipoId" Title="Eliminar" Filterable=false Sortable=false Width="75px">
						<Template Context="data">
							<RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete_sweep" class="m-1" Click=@(() => ShowDeleteDialog(data)) />
						</Template>
					</RadzenDataGridColumn>
				</Columns>
			</RadzenDataGrid>
		</div>
	</div>

	<Modal @ref="modal" Title="Crear/Editar" UseStaticBackdrop="true" CloseOnEscape="false" IsVerticallyCentered="true" Size="ModalSize.Large">
	<BodyTemplate>
	<RadzenTemplateForm TItem="TbVehiculoTipoModel" Data="@TipoVehiculoSelecionado" Submit="OnSubmit">
	<RadzenRow Style="padding: 5px">
	<RadzenColumn Size="12" SizeMD="3">
	<RadzenLabel Component="txtNombre" style="width: 100%; padding-left: 5px" Text="Nombre:"></RadzenLabel>
	</RadzenColumn>
	<RadzenColumn Size="12" SizeMD="9">
	<RadzenTextBox Name="txtNombre" style="width: 100%" Trim="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Off" MaxLength="155" Placeholder="Ingrese nombre..." @bind-Value="@TipoVehiculoSelecionado.Nombre"></RadzenTextBox>
	<RadzenRequiredValidator Component="txtNombre" style="display:block;width:200px;" Text="Ingrese nombre" Popup="true"></RadzenRequiredValidator>
	</RadzenColumn>
	</RadzenRow>
	<RadzenRow Style="padding: 5px">
	<RadzenColumn Size="12">
	<RadzenLabel Text="Activo" Component="chkActivo" Style="margin-left: 8px; vertical-align: middle;" />
	<RadzenCheckBox @bind-Value="@TipoVehiculoSelecionado.Activo" Name="chkActivo" />
	</RadzenColumn>
	</RadzenRow>

	<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
	<RadzenButton @ref="btnGuardar" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Guardar" Variant="Radzen.Variant.Flat" Style="margin: 10px" />
	</RadzenStack>

	</RadzenTemplateForm>

	</BodyTemplate>
	</Modal>
</div>



@code {
	private Modal modal = default!;
	TbVehiculoTipoModel TipoVehiculoSelecionado = new TbVehiculoTipoModel();
	IEnumerable<TbVehiculoTipoModel?> tipoVehiculoGrid;
	RadzenDataGrid<TbVehiculoTipoModel?> grid = null!;
	bool isWaiting = true;
	int count;
	RadzenButton btnGuardar;

	// List<TbPerfilModel?> perfiles;
	// List<TbPersonaModel?> personas;


	//TbUsuarioBL? ubl;
	//TbUsuarioModel? userAccountModel;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// // var _sessionState = await authStateProvider.GetAuthenticationStateAsync();
		// // if (_sessionState.User.Identity.IsAuthenticated)
		// // {
		// // 	var _userData = ((ClaimsIdentity)_sessionState.User.Identity).FindFirst("UserData").Value;

		// // 	userAccountModel = JsonConvert.DeserializeObject<TbUsuarioModel>(_userData);
		// // }
		// using (var _db = ContextFactory.CreateDbContext())
		// {
		// 	ubl = new TbUsuarioBL(_db);

		// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 233))
		// 		Nav.NavigateTo("/sinacceso", true);
		// }
	}

	async Task LoadData(LoadDataArgs args)
	{
		using (var _dbm = ContextFactoryGestionFlotas.CreateDbContext())
		{
			var query = new TbVehiculoTipoBL(_dbm).ListarAsQuerable();

			if (!string.IsNullOrEmpty(args.Filter))
			{
				// Filter via the Where method
				query = query.Where(args.Filter);
			}

			if (!string.IsNullOrEmpty(value: args.OrderBy))
			{
				// Sort via the OrderBy method
				query = query.OrderBy(args.OrderBy);
			}

			// Important!!! Make sure the Count property of RadzenDataGrid is set.
			count = query.Count();

			// Perform paging via Skip and Take.
			tipoVehiculoGrid = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
		}
		isWaiting = false;
	}

	async Task EditarForm(TbVehiculoTipoModel registro)
	{
		try
		{
			using (var _db = ContextFactoryGestionFlotas.CreateDbContext())
			{
				// ubl = new TbUsuarioBL(_db);
				if (registro.TbVehiculoTipoId > 0)
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 16))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");

					TipoVehiculoSelecionado = await new TbVehiculoTipoBL(_db).Obtener(registro.TbVehiculoTipoId);
					await modal.ShowAsync();
				}
				else
				{
					// 	if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 15))
					// 		throw new Exception("Usted no tiene acceso para realizar esta operación");
					TipoVehiculoSelecionado = registro;
					await modal.ShowAsync();
				}
			}
		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		}
	}

	async Task ShowDeleteDialog(TbVehiculoTipoModel registro)
	{
		// 	try
		// 	{
		// 		using (var _db = ContextFactory.CreateDbContext())
		// 		{
		// 			ubl = new TbUsuarioBL(_db);
		// 			if (!ubl.TengoAccesoAccion(userAccountModel.TbPerfilId, 241)) // Privilegio para eliminar
		// 				throw new Exception("Usted no tiene acceso para realizar esta operación");
		// 			else
		// 			{

		// 				var result = await DialogService.OpenAsync("Confirmación eliminación de registro", ds =>
		// @<RadzenStack Gap="1.5rem">
		// 	<div class="row mb-3">
		// 		<h4>Va a eliminar este registro, ¿Desea continuar?</h4>
		// 	</div>
		// 	<RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
		// 		<RadzenStack Orientation="Radzen.Orientation.Horizontal">
		// 			<RadzenButton Text="Si" Click="() => ds.Close(true)" ButtonStyle="ButtonStyle.Danger" class="w-50" />
		// 			<RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="w-50" />
		// 		</RadzenStack>
		// 	</RadzenStack>
		// </RadzenStack>);
		// 				if (result != null)
		// 				{
		// 					if (result && registro != null)
		// 					{
		// 						try
		// 						{
		// 							using (var _dbModules = ContextFactoryGestionInventario.CreateDbContext())
		// 							{
		// 								await new TbBodegaInventarioTipoBL(_dbModules).Eliminar(registro.TbBodegaInventarioTipoId);
		// 							}
		// 							await grid.Reload();
		// 							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro eliminado exitosamente", Duration = 2000 });
		// 						}
		// 						catch (Exception ex)
		// 						{
		// 							ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		// 						}

		// 					}
		// 				}
		// 			}
		// 		}

		// 	}
		// 	catch (Exception ex)
		// 	{
		// 		ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		// 	}
	}

	async void OnSubmit()
	{
		// try
		// {
		// 	btnGuardar.Disabled = true;

		// 	isWaiting = true;

		// 	using (var _db = ContextFactoryGestionInventario.CreateDbContext())
		// 	{
		// 		await new TbBodegaInventarioTipoBL(_db).Guardar(bodegaTipoModel);
		// 		await grid.Reload();
		// 	}

		// 	bodegaTipoModel = null;
		// 	ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registro guardado exitosamente", Duration = 2000 });
		// 	await OnHideModalClick();
		// }
		// catch (Exception ex)
		// {
		// 	ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = ex.Message, Duration = 2000 });
		// }
		// finally
		// {

		// 	isWaiting = false;
		// 	btnGuardar.Disabled = false;
		// }
	}

	void ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}
}
